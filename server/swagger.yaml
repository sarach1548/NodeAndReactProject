openapi: 3.0.0
info:
  title: User API
  version: 1.0.0

paths:
  /users/signUp:
    post:
      summary: Add a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                userPassword:
                  type: string
                userEmail:
                  type: string
              required:
                - userName
                - userPassword
                - userEmail
      responses:
        '201':
          description: Successfully added user
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  email:
                    type: string
                  token:
                    type: string

  /users/login:
    post:
      summary: User login
      tags:
        - Users
      description: Authenticates a user and returns a token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                loginEmail:
                  type: string
                  format: email
                  example: "user@example.com"
                loginPassword:
                  type: string
                  format: password
                  example: "userpassword"
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      userName:
                        type: string
                      userEmail:
                        type: string
                        format: email
                  token:
                    type: string
                    example: "your.jwt.token.here"

  /business/addBusiness:
    post:
      summary: Add a new business
      tags:
        - Business
      description: Adds a new business to the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                businessName:
                  type: string
                  example: "My Business"
                businessDescription:
                  type: string
                  example: "This is a description of my business."
                businessEmail:
                  type: string
                  example: "business@example.com"
                businessPhone:
                  type: string
                  example: "+1234567890"
      responses:
        '201':
          description: Successfully added
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 2
                  businessName:
                    type: string
                    example: "My Business"
                  businessDescription:
                    type: string
                    example: "This is a description of my business."
                  businessEmail:
                    type: string
                    example: "business@example.com"
                  businessPhone:
                    type: string
                    example: "+1234567890"

  /business/updateBusiness/{id}:
    put:
      summary: Update an existing business
      tags:
        - Business
      description: Updates an existing business in the system
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                businessName:
                  type: string
                  example: "Updated Business"
                businessDescription:
                  type: string
                  example: "This is an updated description of my business."
                businessEmail:
                  type: string
                  example: "updated_business@example.com"
                businessPhone:
                  type: string
                  example: "+0987654321"
      responses:
        '200':
          description: Successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 2
                  businessName:
                    type: string
                    example: "Updated Business"
                  businessDescription:
                    type: string
                    example: "This is an updated description of my business."
                  businessEmail:
                    type: string
                    example: "updated_business@example.com"
                  businessPhone:
                    type: string
                    example: "+0987654321"

  /services/addService:
    post:
      summary: Add a new service
      tags:
        - Services
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Services'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Services'

  /services/updateService/{serviceId}:
    put:
      summary: Update an existing service
      tags:
        - Services
      parameters:
        - name: serviceId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:  
            schema:
              $ref: '#/components/schemas/Services'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Services'

  /services/getServices:
    get:
      summary: Get all services
      tags:
        - Services
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Services'

  /services/deleteServiceById/{serviceId}:
    delete:
      summary: Delete a service by ID
      tags:
        - Services
      parameters:
        - name: serviceId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /meetings/addMeeting:
    post:
      summary: Add a new meeting
      tags:
        - Services
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Services'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Services'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        userName:
          type: string
        userEmail:
          type: string
        userPassword:
          type: string
        userToken:
          type: string
      required:
        - userName
        - userEmail
        - userPassword

    Business:
      type: object
      properties:
        id:
          type: integer
        businessName:
          type: string
        businessDescription:
          type: string
        businessEmail:
          type: string
        businessPhone:
          type: string
      required:
        - businessName
        - businessDescription
        - businessEmail
        - businessPhone

    Services:
      type: object
      properties:
        id:
          type: integer
        serviceName:
          type: string
        serviceDescription:
          type: string
        serviceCost:
          type: number
        serviceDuration:
          type: integer
      required:
        - serviceName
        - serviceDescription
        - serviceCost
        - serviceDuration

    Meetings:
      type: object
      properties:
        id:
          type: integer
        meetingDate:
          type: string
          format: date-time
        userId:
          type: integer
        serviceId:
          type: integer
      required:
        - meetingDate
        - userId
        - serviceId

